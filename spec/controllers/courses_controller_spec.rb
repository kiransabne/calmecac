require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CoursesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Course. As you add validations to Course, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CoursesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    sign_in_teacher
  end

  describe "GET #index" do
    it "returns a success response" do
      course = create(:course)
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      course = create(:course)
      get :edit, params: {id: course.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid attributes" do
      it "creates a new course" do
        course = create(:course)
        expect {
          post :create, params: {
            "course": {
              "user_id": "2",
              "name": "Test Course",
              "description": "Test Description",
              "objectives": "test goal, test goal 1",
              "sections": {
                "30f725ee-db90-4ba1-bdf1-27cbb5568c7c": {
                  "name": "Test Module",
                  "resources": {
                    "c6c3b68f-18e7-414f-b30c-e4ca23433946": {
                      "link": "http://resource2"
                    },
                    "09013a6d-cf4b-48e5-bd13-cd26551095dd": {
                      "link": "http://resource1"
                    }
                  },
                  "activities": {
                    "79280be6-cc75-4340-8707-3b77f616510b": {
                      "description": "answer questions",
                      "url": "http://activity2",
                      "questions": {
                        "7fe750f1-dfbe-4cc5-8172-4417c78d15b3": "did you 3?"
                      }
                    }
                  },
                  "exam": {
                    "db17dc0f-e2bf-464b-9510-d2aec129785f": {
                      "description": "exam!",
                      "questions": {
                        "37ecb12e-eed6-4497-869d-c71334e76a24": "did you 2 ?",
                        "302ae3ef-6a1c-4fbb-b5ac-a4674a002c4c": "did you?"
                      }
                    }
                  }
                }
              }
            }
          }
        }.to change(Course, :count).by(1)
      end
      it "redirects to the created activity" do
        post :create, params: {
          "course": {
            "user_id": "2",
            "name": "Test Course",
            "description": "Test Description",
            "objectives": "test goal, test goal 1",
            "sections": {
              "30f725ee-db90-4ba1-bdf1-27cbb5568c7c": {
                "name": "Test Module",
                "resources": {
                  "c6c3b68f-18e7-414f-b30c-e4ca23433946": {
                    "link": "http://resource2"
                  },
                  "09013a6d-cf4b-48e5-bd13-cd26551095dd": {
                    "link": "http://resource1"
                  }
                },
                "activities": {
                  "79280be6-cc75-4340-8707-3b77f616510b": {
                    "description": "answer questions",
                    "url": "http://activity2",
                    "questions": {
                      "7fe750f1-dfbe-4cc5-8172-4417c78d15b3": "did you 3?"
                    }
                  }
                },
                "exam": {
                  "db17dc0f-e2bf-464b-9510-d2aec129785f": {
                    "description": "exam!",
                    "questions": {
                      "37ecb12e-eed6-4497-869d-c71334e76a24": "did you 2 ?",
                      "302ae3ef-6a1c-4fbb-b5ac-a4674a002c4c": "did you?"
                    }
                  }
                }
              }
            }
          }
        }
        expect(response).to redirect_to(my_courses_path)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {
          "course": {
            "name": 23423443,
            "description": "Test Description",
            "objectives": "test goal, test goal 1",
            "sections": {
              "30f725ee-db90-4ba1-bdf1-27cbb5568c7c": {
                "name": "Test Module",
                "resources": {
                  "c6c3b68f-18e7-414f-b30c-e4ca23433946": {
                    "link": 2344533
                  },
                  "09013a6d-cf4b-48e5-bd13-cd26551095dd": {
                    "link": 234452435
                  }
                },
                "activities": {
                  "79280be6-cc75-4340-8707-3b77f616510b": {
                    "description": "answer questions",
                    "url": 245234555,
                    "questions": {
                      "7fe750f1-dfbe-4cc5-8172-4417c78d15b3": 7968969
                    }
                  }
                },
                "exam": {
                  "db17dc0f-e2bf-464b-9510-d2aec129785f": {
                    "description": "exam!",
                    "questions": {
                      "37ecb12e-eed6-4497-869d-c71334e76a24": "did you 2 ?",
                      "302ae3ef-6a1c-4fbb-b5ac-a4674a002c4c": "did you?"
                    }
                  }
                }
              }
            }
          }
        }

        expect(response).to be_success
      end
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     it "updates the requested course" do
  #       course = create(:course)
  #       # put :update, id: @activity, activity: attributes_for(:activity, name: "my new name")
  #       put :update, params: {}
  #       course.reload
  #     end

      # it "redirects to the course" do
      #   course = Course.create! valid_attributes
      #   put :update, params: {id: course.to_param, course: valid_attributes}, session: valid_session
      #   expect(response).to redirect_to(course)
      # end
    # end

    # context "with invalid params" do
    #   it "returns a success response (i.e. to display the 'edit' template)" do
    #     course = Course.create! valid_attributes
    #     put :update, params: {id: course.to_param, course: invalid_attributes}, session: valid_session
    #     expect(response).to be_success
    #   end
    # end
  # end

end
